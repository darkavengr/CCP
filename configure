#!/bin/bash
#
# Configure script for CCP
#


function check_if_module_included {
	for mod in $module_names; do 
		if [ "$mod" == "$1" ]; then
			return 1
		fi
	done

return 0
}  
	 
list_of_arches=`ls hwdep`
module_names=""

echo
echo Interactive configure script
echo

#
# select the architecture
#

echo "Choose which platform you want to compile for."

while [ ${#response} == 0 ]; do		# no input, use default
	myp="Enter platform to compile for ["$list_of_arches"]:"
	echo -n $myp
	read response

	if [ -z "$response" ]; then
	echo "Enter platform to compile for"
	fi

	for f in $list_of_arches; do		# check if valid input
	if [ "$f" == "$response" ]; then
		compile_arch=$response
		break
	fi
	done

	if [ ${#compile_arch} == 0 ]; then	# not valid arch
	echo configure: Unknown platform must be one of $list_of_arches
	response=""
	fi
	
done

if [ ! -e hwdep/$compile_arch/config ]; then		# check if config file exists
	echo configure: Missing file hwdep/$compile_arch/config
	exit 1
fi

echo Compiling for $compile_arch

CC_OPT_COUNT=0
#
# read options from config file
#
while IFS= read -r var
do

	IFS='=' read -r varname varval <<< "$var"		#read line from file and split at = into varname and varval

	case $varname in			# process 
		CC)				# c compiler
			CC=$varval
			;;

		ASM)				# assembler
			ASM=$varval
			;;

	 	LD)				# linker
	 		LD=$varval
	 		;;

		LD_OPTS)				# linker options
	 		LDOPTS=$varval
	 		;;

	 	CC_OPTS)   				# compiler options
	  		CC_OPTS=$varval
	 		;;

	 	ASM_OPTS)   				# assembler options
	  		ASM_OPTS=$varval   
	 		;;

	 	SEARCH)				# search path
	  		SEARCH=$varval
	  		;;

	 	CC_BASE_FILES)			# base files for c compiler
	  		CC_BASE_FILES=$varval
	  		;;

	 	ASM_BASE_FILES)			# base files for assembler
	  		ASM_BASE_FILES=$varval
	  		;;

	 	CC_OPT_FILE)				# optional files for c compiler
	  		OPT_FILES[optcount]=$varval
	  
			let "optcount++"
	  		;;
	esac
	  
done < hwdep/$compile_arch/config

#
# Select optional features
#

count=0;

while [ "$optcount" != 0 ]; do		# until all optional features done

	IFS=':' read -r cc_desc cc_yes cc_no <<< "${OPT_FILES[count]}"	# read line and split into cc_desc,cc_yes and cc_no variables
	
	read -p "$cc_desc (Y/n)?" yesno		# prompt user to include feature
	
	if [ ${#yesno} == 0 ] || [ $yesno == "y" ]; then		# include feature
		CC_OPT_FILES="$CC_OPT_FILES $cc_yes"		# use file for this feature
	else
		CC_OPT_FILES="$CC_OPT_FILES $cc_no"		# use alternative file
	fi

	
	let "optcount--"
	let "count++"
done

#
# choose which modules to compile
#
echo
echo "Select the modules you want to compile, enter y to compile the module into the kernel,"
echo "m to compile to external initrd module or enter n to not compile the module."
echo

#
# go through each driver
#
for f in $SEARCH;do 

	m=`echo $f | cut -d/ -f 1`
	name=`echo $f | cut -d/ -f 2`
	a=`echo $f | cut -d/ -f 3`

	let CC_OPT_COUNT=0

	if [ $name == "drivers" ] || [ $name == "filesystems" ] ||  [ $name == "binfmt" ]; then  

		#read driver config information

		DRIVERNAME=""
		DESCRIPTION=""
		COMPILE_DEFAULT_OPT=""
		REQUIRED=""

		while IFS= read -r var			# read lines from file
		do

			IFS='=' read -r varname varval <<< "$var"	# split line to varname and varval variables

			case $varname in
				name)			# driver name
					DRIVERNAME=$varval
	   				;;

	 			description)			# driver description
	  				DESCRIPTION=$varval
	  				;;

	 			compile_opt)			# Is optional feature
	  				COMPILE_OPT=$varval
	  				;;

	 			requires)			# Required modules
	  				REQUIRED=$varval
	  				;;

	 		esac
	  
		done < $f/config

#
# prompt user
#
	
		check_if_module_included "$DRIVERNAME"

		rv=$?	# need to save it so it can be compared

		if [ $rv == 0 ]; then
			echo $DESCRIPTION	# display description
			echo

			printf "Include module $DRIVERNAME"	# prompt user

			if [ "$COMPILE_OPT" == "y" ] || [ "$COMPILE_OPT" == "Y" ]; then	# prompt if module is built-in
				echo -n " (Y/n)?"
			elif [ "$COMPILE_OPT" == "m" ] || [ "$COMPILE_OPT" == "M" ]; then	# initrd modult
				echo -n " (y/n/M)?"		# not by default
			elif [ "$COMPILE_OPT" == "n" ] || [ "$COMPILE_OPT" == "N" ]; then	# not used by default
				echo -n " (y/N/m)?"
			fi

			read response

			if [  ${#response} == 0 ]; then		# use default response
					if [ "$COMPILE_OPT" == "y" ] || [ "$COMPILE_OPT" == "Y" ]; then	# prompt if module is built-in
						module_list="$module_list $f"	# add to list
						module_names="$module_names $DRIVERNAME"	# add to list     
				
						response="y"

					elif [ "$COMPILE_OPT" == "m" ] || [ "$COMPILE_OPT" == "M" ]; then	# initrd modult
						initrd_module_list="$initrd_module_list $f"	# add to list
						module_names="$module_names $DRIVERNAME"	# add to list     

						response="m"
					fi
			else
			   if  [ "$response" == "y" ] || [ "$response" == "Y" ] || [ "$response" == "m" ] || [ "$response" == "M" ]; then	# do response
	
				if  [ "$response" == "y" ] || [ "$response" == "Y" ]; then		# built-in module
					module_list="$module_list $f"	# add to list
					module_names="$module_names $DRIVERNAME"	# add to list     
				fi

				if  [ "$response" == "m" ] || [ "$response" == "M" ]; then		# initrd module
					initrd_module_list="$initrd_module_list $f"	# add to list
					module_names="$module_names $DRIVERNAME"	# add to list     
				fi		

				#
				# add dependencies
				#
				if ! [ "$REQUIRED" = "" ]; then		# there is a required check
	   				check_if_module_included "$REQUIRED"	# check if already included

	   				rv=$?	# need to save it so it can be compared

	   				if [ "$rv" == "0" ]; then		# not already included
						echo
						echo Including required dependency $REQUIRED
						echo

		     				module_list="$module_list modules/drivers/$REQUIRED"	# add to list
		     				module_names="$module_names $REQUIRED"	# add to list     
					fi
	  			fi
			   fi
			fi

    fi
fi
done

#
# Generate makefiles from templates
#
echo Generating Makefiles

for f in $SEARCH;do			# for each directory in search path

# check if makefile exists	

	if [ ! -e $f/Makefile.in ]; then 		
		echo configure: Missing file $f/Makefile.in
		exit 1
	fi

	echo Creating $f/Makefile

	echo $CC_BASE_FILES

# Generate makefiles from templates

	cat $f/Makefile.in | sed s/\@asm\@/$ASM/g | sed s/\@cc\@/$CC/g | sed s/\@arch\@/$compile_arch/g \
	| sed s/\@ld\@/"$LD"/g |  sed s/\@ldopts\@/$LDOPTS/g \
	| sed s:\@driver_list\@:"$module_list":g | sed s/\@asm_opts\@/"$ASM_OPTS"/g \
	| sed s:\@initrd_driver_list\@:"$initrd_module_list":g | sed s/\@asm_opts\@/"$ASM_OPTS"/g \
	| sed s/\@cc_opts\@/"$CC_OPTS"/g \
	| sed s:\@cc_base_files\@:"$CC_BASE_FILES":g \
	| sed s:\@cc_opt_files\@:"$CC_OPT_FILES":g  > $f/Makefile

	if [ $? != 0 ]; then
		echo configure: Error creating output file $f/Makefile
		exit 1
	fi

done

